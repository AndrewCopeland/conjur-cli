#!/usr/bin/env ruby

require 'json'
require 'conjur/cli'
require 'shellwords'

class ConjurCompletion
  def initialize (line, point)
    @line=line
    @words=tokenize_cmd @line
    @point=point
    @current_word=(tokenize_cmd @line.slice(0,@point)).length-1
    # fix arrays for empty "current word"
    # ie "conjur group list "
    if @line.match /[ =]$/ then
      @words << ''
      @current_word += 1
    end

    index = 1
    cmd = Conjur::CLI
    loop do
      word = @words[index]
      sub = subcommands cmd
      if sub.has_key? word.to_sym and index < @current_word
        cmd = cmd.commands[word.to_sym]
        index += 1
      else
        break
      end
    end

    @command_word = index
    @num_flags = @num_args = 0
    while index < @current_word
      word = @words[index]
      if word.start_with? '-'
        @num_flags += 1
        index += 1
      elsif word.length
        @num_args += 1
      end
      index += 1
    end

    candidates = compgen case @words[@current_word-1]
                         when "--as-role="
                           _role
                         when "--as-group="
                           _resource 'group'
                         else
                           if @words[@current_word].start_with? '-'
                             _flags cmd
                           else
                             (_subcommands cmd) + (_args cmd, @num_args)
                           end
                         end
    puts candidates.join "\n"
  end

  def subcommands cmd
    cmd.commands.select do |_, c|
      c.nodoc.nil?
    end
  end
  
  def tokenize_cmd line
    line.split(/ |(?<==)/)
  end

  def _subcommands cmd
    (subcommands cmd).keys.map(&:to_s)
  end

  def _flags cmd
    cmd.flags.values.map do |flag|
      candidates = [flag.name]
      if flag.aliases
        candidates += flag.aliases
      end
      candidates.map do |c|
        "-#{'-' if c.length > 1}#{c}#{'=' if c.length > 1}"
      end
    end + cmd.switches.values.map do |switch|
      candidates = [switch.name]
      if switch.aliases
        candidates += switch.aliases
      end
      candidates.map do |c|    
        "-#{'-' if c.length > 1}#{c}"
      end
    end
  end

  def _args cmd, num_args
    desc = cmd.arguments_description if defined? cmd.arguments_description
    desc = desc.to_s.downcase.split[num_args]
    case desc
    when 'resource'
      _resource
    when 'role'
      _role
    when 'file'
      _file
    else
      _resource desc if ['group',
                         'user',
                         'variable',
                         'host',
                         'layer',
                        ].member? desc
    end || []
  end

  public
  def compgen completions
    completions.flatten!
    word = @words[@current_word]
    completions.select do |candidate|
      candidate.start_with? word and
        candidate != word
    end.map do |candidate|
      "#{candidate}#{' ' if not candidate.end_with? '='}"
    end
  end

  def _resource resource_kind=nil
    drop_fields = 1
    drop_fields += 1 if resource_kind
    Conjur::Command.api.resources({kind: resource_kind})
      .map(&:attributes)
      .map do |r| r['id'].split(':').drop(drop_fields).join('\:') end
  end
  
  def _role
    Conjur::Command.api.current_role.all
      .map(&:roleid)
      .map do |r| r.split(':').drop(1).join('\:') end
  end

  def _file
    word = @words[@current_word]
    `bash -c "compgen -f #{word}"`.shellsplit
  end
end

# execute using environment if called as a script
if Pathname.new(__FILE__).basename == Pathname.new($0).basename
  ConjurCompletion.new ENV['COMP_LINE'], ENV['COMP_POINT'].to_i
end
